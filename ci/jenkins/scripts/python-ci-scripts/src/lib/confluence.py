"""This module contains functions for working with Confluence."""

import json
import os
import logging
import re
import markdown
import requests
from requests.auth import HTTPBasicAuth

LOG = logging.getLogger(__name__)


# pylint: disable=too-many-locals
def transfer_gerrit_documents(space_key, url, parent_id, documents_path):
    """
    Transfer documentation to Confluence.

    Input:
        space_key: The space key of the area in Confluence
        url: The Confluence URL
        parent_id: The parent ID of where the tickets should be created
        documents_path: The path to the documents to send to Confluence

    Output:
        A series of pages created on Confluence
    """
    functional_user_username = os.environ.get('FUNCTIONAL_USER_USERNAME', None)
    functional_user_password = os.environ.get('FUNCTIONAL_USER_PASSWORD', None)
    basic_auth = HTTPBasicAuth(username=functional_user_username, password=functional_user_password)
    headers = {'Content-Type': 'application/json;charset=iso-8859-1'}
    params = {"start": 0, "limit": 100}
    list_of_child_pages = requests.get(url=f"{url}/{parent_id}/child/page",
                                       headers=headers, auth=basic_auth,
                                       params=params, timeout=10)
    LOG.debug("Child pages response code: %s", list_of_child_pages.status_code)
    LOG.debug("Child pages response headers: %s", list_of_child_pages.headers)
    list_of_child_pages = list_of_child_pages.json()
    titles_and_ids = {}
    for child in list_of_child_pages["results"]:
        titles_and_ids[child["title"]] = child["id"]
    LOG.info("Child pages and IDs of the parent page: %s", titles_and_ids)
    files_list = list(os.listdir(documents_path))
    LOG.info("Files being transferred to Confluence: %s", files_list)
    for file in files_list:
        if os.path.isdir(os.path.join(os.getcwd(), documents_path, file)):
            LOG.info("Skipping directory: %s", os.path.join(os.getcwd(), documents_path, file))
            continue
        with open(f"{documents_path}/{file}", "r", encoding="utf-8") as document:
            page_html = _generate_html_content_for_confluence(document, space_key)
        if file in titles_and_ids:
            page_id = titles_and_ids[file]

            update_existing_confluence_page(basic_auth=basic_auth, headers=headers,
                                            page_id=page_id, url=url, page_title=file,
                                            space_key=space_key, page_html=page_html)
        else:
            create_new_confluence_page(basic_auth=basic_auth, headers=headers, parent_id=parent_id, url=url,
                                       page_title=file, space_key=space_key, page_html=page_html)


def _generate_html_content_for_confluence(document, space_key):
    """
    Create the HTML for the Confluence page.

    Input:
        document: A file object to create the HTML
        space_key: The space key of the area in Confluence

    Returns
    -------
        A string HTML object

    """
    gerrit_gamma_url = "https://gerrit-gamma.gic.ericsson.se/#/"
    os_integration_url = gerrit_gamma_url + "admin/projects/OSS/com.ericsson.oss.aeonic/oss-integration-ci"
    html_content_beginning = "<p><b>Important: This page has been generated automatically " \
                             "based on the Ticketmaster documentation from Gerrit. " \
                             "Please do not edit this file, as it will be overwritten. " \
                             "To edit the source-controlled Ticketmaster documentation, make a change " \
                             "to the oss-integration-ci repository " \
                             f'<a href="{os_integration_url}">here</a></b></p>'
    page_html = document.read()
    braces_pattern = r'<([^<>]+)>'
    braces_replacement = r'&lt;\1&gt;'
    page_html = re.sub(braces_pattern, braces_replacement, page_html)
    confluence_display_url = f"https://confluence-oss.seli.wh.rnd.internal.ericsson.com/display/{space_key}/"
    page_html = page_html.replace("../", confluence_display_url)
    page_html = markdown.markdown(page_html, extensions=['markdown.extensions.tables'])
    page_html = html_content_beginning + page_html
    return page_html


# pylint: disable=too-many-arguments
def update_existing_confluence_page(basic_auth, headers, page_id, url, page_title, space_key, page_html):
    """
    Update an existing Confluence page.

    Input:
        basic_auth: An authentication object with username and password
        headers: The headers to update the page
        page_id: The ID of the page to be updated
        url: The Confluence URL
        page_title: The updated title of the page
        space_key: The space key of the page
        page_html: The updated HTML of the page

    Output:
        An updated Confluence page
    """
    url = f"{url}/{page_id}"
    version_number = requests.get(url=url, headers=headers,
                                  auth=basic_auth, timeout=10).json()["version"]["number"] + 1
    page_title = page_title.replace(".md", " ").replace("_", " ")
    data = {
        "type": "page",
        "version": {
            "number": version_number,
        },
        "title": page_title,
        "space": {
            "key": space_key,
        },
        "body": {
            "storage": {
                "value": page_html,
                "representation": "storage",
            },
        },
    }
    response = requests.put(url, data=json.dumps(data), headers=headers, auth=basic_auth, timeout=10)
    if response.status_code == 200:
        LOG.info("Page updated successfully for %s", page_title)
    else:
        LOG.info("Failed to update page for %s. Status code: %s."
                 "Reason: %s", page_title, response.status_code, response.content)


# pylint: disable=too-many-arguments
def create_new_confluence_page(basic_auth, headers, parent_id, url, page_title, space_key, page_html):
    """
    Create a Confluence page.

    Input:
        basic_auth: An authentication object with username and password
        headers: The headers to create the page
        parent_id: The parent ID of the page where the new page should be created
        url: The Confluence URL
        page_title: The title of the page
        space_key: The space key of the page
        page_html: The HTML of the page

    Output:
        A new Confluence page
    """
    page_title = page_title.replace(".md", " ").replace("_", " ")
    data = {
        'type': 'page',
        'title': page_title,
        'ancestors': [{'id': parent_id}],
        'space': {'key': space_key},
        'body': {
            'storage': {
                'value': page_html,
                'representation': 'storage',
            }
        }
    }
    response = requests.post(url, data=json.dumps(data), headers=headers, auth=basic_auth, timeout=10)
    if response.status_code == 200:
        LOG.info("Page created successfully for %s", page_title)
    else:
        LOG.info("Failed to create page for %s. Status code: %s."
                 "Reason: %s", page_title, response.status_code, response.content)
